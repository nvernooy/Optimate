# Models file contains resources used in the project
from persistent import Persistent
from BTrees.OOBTree import OOBTree
import uuid


class RootModel(Persistent):
    """
    A Persistent class that acts as the root object in the ZODB
    It has an OOBTree of the children of this object
    Its ID as the root is 0, and it implements the __getitem__ method
    """

    __name__ = None
    __parent__ = None

    def __init__(self, children = OOBTree()):
        self.Subitem = children
        self.ID = "0"

    def addSet (self, children):
        self.Subitem = children

    def addItem (self, key, item):
        self.Subitem.insert (key, item)

    def items(self):
        return self.Subitem

    def __getitem__ (self, key):
        child = self.Subitem[key]

        if child != None:
            return child
        else:
            raise KeyError

class Project(Persistent):
    """
    A Persistent class that has the root as its parent
    It has an OOBTree of the children of this object
    It's ID is generated by uuid
    It implements the __getitem__ method
    """

    __parent__ = "0"

    def __init__(self, nam, desc, children = OOBTree()):
        self.Subitem = children
        self.Name = nam
        self.Description = desc
        self.ID = uuid.uuid1().hex    # The ID is the hex value of a UUID
        self.__name__ = self.ID

    def addSet (self, children):
        self.Subitem = children

    def addItem (self, key, item):
        self.Subitem.insert (key, item)

    def __getitem__ (self, key):
        child = self.Subitem[key]

        if child != None:
            return child
        else:
            raise KeyError


class BudgetGroup(Persistent):
        """
    A Persistent class that has a Project as its parent
    It has an OOBTree of the children of this object
    It's ID is generated by uuid
    It implements the __getitem__ method
    """


    def __init__(self, nam, desc, parentid, children = OOBTree()):
        self.Subitem = children
        self.Name = nam
        self.Description = desc
        self.ID = uuid.uuid1().hex    # The ID is the hex value of a UUID
        self.__name__ = self.ID
        self.__parent__ = parentid

    def addSet (self, children):
        self.Subitem = children

    def addItem (self, key, item):
        self.Subitem.insert (key, item)

    def __getitem__ (self, key):
        child = self.Subitem[key]

        if child != None:
            return child
        else:
            raise KeyError


class BudgetItem(Persistent):
    """
    A Persistent class that has a BudgetGroup as its parent
    Its the leaf object and has no children
    It's ID is generated by uuid
    It does not implement the __getitem__ method
    """

    def __init__(self, nam, desc, quan, rate, parentid):
        self.Name = nam
        self.Description = desc
        self.Quantity = quan
        self.Rate = rate
        self.ID = uuid.uuid1().hex    # The ID is the hex value of a UUID
        self.__name__ = self.ID
        self.__parent__ = parentid


def appmaker(zodb_root):
    """appmaker gets the ZODB connection and checks if there is anything in the root.
    If there isn't then the database is built.
    Afterward the root is returned.
    """

    if not 'app_root' in zodb_root:
        # Build the Root
        app_root = RootModel()

        # Build the Projects
        project = Project("PName", "PDesc")

        # Build the next level in the hierarchy
        budgetgroup = BudgetGroup("BGName", "BGDesc", project.ID)

        # Build the next level
        budgetitem = BudgetItem("BIName", "BIDesc", 10, 5, budgetgroup.ID)

        # Build the hierarchy
        budgetgroup.addItem(budgetitem.ID,budgetitem)
        project.addItem(budgetgroup.ID,budgetgroup)
        app_root.addItem(project.ID,project)

        # Add the root the the ZODB
        zodb_root['app_root'] = app_root
        import transaction
        transaction.commit()

    return zodb_root['app_root']
